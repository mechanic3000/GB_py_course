# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр,
#  соответствующий количеству клеток (целое число). В классе должны быть реализованы методы перегрузки арифметических
#  операторов:
#  сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны
#  применяться только к
# клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает,
# то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.


class Cell:
    def __init__(self, count):
        self.__count = int(count)

    def __add__(self, other):
        x = self.__count + int(other)
        return Cell(x)

    def __sub__(self, other):
        x = self.__count
        if self.__count >= int(other):
            x = self.__count - int(other)
        else:
            print("ОШИБКА - Уменьшаемая клетка меньше вычитаемой!\nОперация отменена.")
        return Cell(x)

    def __mul__(self, other):
        x = self.__count * int(other)
        return Cell(x)

    def __truediv__(self, other):
        x = self.__count // int(other)
        return Cell(x)

    def __str__(self):
        return str(self.__count)

    def __int__(self):
        return int(self.__count)

    def make_order(self, n):
        whole_row = self.__count // n
        remain_cell = self.__count % n
        return_line = ''
        for i in range(whole_row):
            return_line += '*' * n + '\n'
        return_line += '*' * remain_cell

        return return_line.rstrip('\n')


c1 = Cell(26)
c2 = Cell(3)

c1 += c2
print(c1)

# c1 -= c2
c2 -= c1
print(c1)

c4 = c1 * c2
print(c4)

c1 /= c2
print(c1)

print(c1.make_order(8))
